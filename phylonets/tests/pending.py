# class TestOnlyOneSuccessor(unittest.TestCase):
#     """
#     Aquests clústers inicials donaven un error de que en alguns trobam
#     més d'un sucessor per un híbrid (cosa que és una aserció i no ha
#     de passar mai).
#     """

#     @unittest.skip("Not ready")
#     def test_1(self):
#         """ 10 nodes, 4 híbrids """
#         clusters = [(2, 7), (4, 5), (2, 6), (5, 9), (2, 5),
#                     (1, 2, 3, 5, 8), (1, 2, 5, 7, 9),
#                     (1,), (2,), (3,), (4,), (5,), (6,), (7,),
#                     (8,), (9,), (10,)]
#         G = construct(clusters)
#         gold = set()
#         self.assertItemsEqual(calc_soft_cluster(G), gold)

#     def test_2(self):
#         """ 10 fulles, 4 híbrids """
#         clusters = [(1, 2, 3), (1, 2, 4), (1, 2), (1, 3),
#                     (1, 2, 3, 4)] + [(1,), (2,), (3, ), (4, )]
#         G = construct(clusters)
#         gold = clusters + [(2, 4), ]
#         self.assertItemsEqual(calc_soft_cluster(G), gold)


# class TestSlow(unittest.TestCase):

#     @unittest.skip("Massa lent")
#     def test_1(self):
#         """ 12 fulles, 9 híbrids, 6144 crides, 9.3 segons"""
#         clusters = [(7, 9, 12), (6, 10, 11), (3, 5, 12),
#                     (4, 9, 11), (1, 5, 12), (5, 7, 11),
#                     (3, 6, 7, 9, 10, 12), (1, 2, 5, 10, 11, 12),
#                     (2, 4, 5, 9, 11, 12),
#                     (1,), (2,), (3,), (4,), (5,), (6,),
#                     (7,), (8,), (9,), (10,), (11,), (12,)]
#         G = construct(clusters)

#         gold = {
#             (1,), (1, 2), (1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12),
#             (1, 2, 5), (1, 2, 5, 10), (1, 2, 5, 10, 11, 12), (1, 2, 5, 11, 12),
#             (1, 2, 5, 12), (1, 2, 10), (1, 2, 10, 11), (1, 2, 10, 11, 12),
#             (1, 2, 10, 12), (1, 2, 11), (1, 2, 11, 12), (1, 2, 12), (1, 5),
#             (1, 5, 12), (1, 10), (1, 10, 11), (1, 10, 11, 12), (1, 10, 12),
#             (1, 11), (1, 11, 12), (1, 12), (2,), (2, 4), (2, 4, 5),
#             (2, 4, 5, 9), (2, 4, 5, 9, 11), (2, 4, 5, 9, 11, 12),
#             (2, 4, 5, 9, 12), (2, 4, 5, 11), (2, 4, 5, 12), (2, 4, 9),
#             (2, 4, 9, 11), (2, 4, 9, 12), (2, 4, 11), (2, 4, 12), (3,), (3, 5),
#             (3, 5, 12), (3, 7), (3, 7, 9), (3, 7, 10), (3, 7, 12), (3, 9),
#             (3, 9, 10), (3, 12), (4,), (4, 5), (4, 5, 9), (4, 5, 9, 12),
#             (4, 5, 11), (4, 5, 12), (4, 9), (4, 9, 11), (4, 9, 12), (4, 11),
#             (4, 11, 12), (4, 12), (5,), (5, 7), (5, 11), (6,), (6, 7),
#             (6, 7, 9), (6, 7, 9, 10, 12), (6, 7, 9, 12), (6, 7, 12), (6, 9),
#             (6, 9, 10), (6, 10), (6, 10, 11), (6, 11), (7,), (7, 9),
#             (7, 9, 10), (7, 9, 10, 12), (7, 9, 12), (7, 10), (7, 10, 12),
#             (7, 11), (7, 12), (8,), (9,), (9, 10), (9, 10, 12), (9, 12),
#             (10,), (10, 12), (11,), (12,)}

#         self.assertItemsEqual(calc_soft_cluster(G), gold)

#     @unittest.skip("Massa lent")
#     def test_2(self):
#         """ 12 fulles, 11 híbrids, 77446 crides, 133 segons"""
#         clusters = [(1, 4, 8), (2, 3, 12), (8, 9, 12), (3, 5, 11),
#                     (1, 9, 10), (2, 5, 8),
#                     (5, 6, 7, 8, 9, 12), (4, 6, 9, 10, 11, 12),
#                     (3, 4, 5, 6, 8, 9),
#                     (1,), (2,), (3,), (4,), (5,), (6,),
#                     (7,), (8,), (9,), (10,), (11,), (12,)]
#         G = construct(clusters)
#         gold = set()
#         self.assertItemsEqual(calc_soft_cluster(G), gold)

#     @unittest.skip("Massa lent")
#     def test_3(self):
#         """ 13 fulles, 12 híbrids, 214k crides, 350 segons"""
#         clusters = [
#             (2, 5, 8), (4, 6, 11), (1, 9, 11), (3, 5, 12),
#             (1, 8, 10), (1, 6, 11),
#             (1, 3, 6, 9, 12, 13), (2, 4, 7, 8, 9, 13),
#             (3, 4, 6, 8, 10, 13),
#             (1,), (2,), (3,), (4,), (5,), (6,), (7,), (8,),
#             (9,), (10,), (11,), (12,), (13,)]
#         G = construct(clusters)
#         gold = set()
#         self.assertItemsEqual(calc_soft_cluster(G), gold)

#         """"
# [(2, 10), (1, 7), (2, 13), (5, 6, 12), (8, 10, 12), (3, 4, 6), (3, 4,
#    5, 13), (1, 5, 7, 11), (1, 8, 10, 11), (2, 3, 5, 8, 11), (1, 4, 8,
#    9, 13), (1, 2, 8, 9, 11), (1, 3, 6, 10, 12, 13), (2, 4, 6, 8, 11,
#    12), (1, 4, 9, 10, 11, 12), (2, 3, 4, 5, 8, 11, 12), (1, 4, 5, 9,
#    10, 11, 12), (1, 3, 4, 7, 8, 10, 12), (2, 4, 5, 6, 8, 11, 12, 13),
#    (1, 2, 4, 5, 7, 8, 9, 10), (1, 2, 5, 6, 7, 8, 10, 11), (2, 3, 4, 5,
#    6, 7, 8, 9, 12), (1, 2, 3, 7, 8, 9, 10, 11, 13), (1, 2, 3, 5, 7, 9,
#    11, 12, 13), (1, 2, 3, 4, 7, 8, 9, 10, 11, 13), (1, 2, 3, 5, 6, 7,
#    9, 10, 12, 13), (1, 2, 3, 5, 6, 7, 8, 9, 10, 11), (2, 4, 5, 6, 7,
#    8, 9, 10, 11, 12, 13), (1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12), (1, 2,
#    3, 4, 5, 7, 8, 9, 10, 11, 13), (1,), (2,), (3,), (4,), (5,), (6,),
#    (7,), (8,), (9,), (10,), (11,), (12,), (13,)]
#         """
